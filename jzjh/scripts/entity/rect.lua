---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by G_Seinfeld.
--- DateTime: 2018/11/1 10:17
---

local jass = require 'jass.common'
local dbg = require 'jass.debug'
local rect = {}
et.rect = rect

setmetatable(rect, rect)

--- @class rect
local mt = {}
rect.__index = mt

mt.type = 'rect'
mt.min_x = 0
mt.max_x = 0
mt.min_y = 0
mt.max_y = 0

mt.handle = 0

function mt:get_min_x()
    return self.min_x
end

function mt:get_min_y()
    return self.min_y
end

function mt:get_max_x()
    return self.max_x
end

function mt:get_max_y()
    return self.max_y
end

function mt:get()
    return self.min_x, self.min_y, self.max_x, self.max_y
end

--- @param name string 事件名称
--- @return function
function mt:event(name)
    return et.event_register(self, name)
end

--- 事件通知
function mt:event_notify(name, ...)
    et.event_notify(self, name, ...)
    et.event_notify(et.game, name, ...)
end

--- @param u unit
function mt:contains_unit(u)
    local x, y = u:get_point():get()
    return self.min_x <= x and x <= self.max_x and self.min_y <= y and y <= self.max_y
end

--- 获取区域内符合过滤条件的单位数量
--- @param filter function 过滤条件，参数为unit
--- @return number 数量
function mt:get_unit_count(filter)
    local count = 0
    for _, u in pairs(et.unit.all_units) do
        if self:contains_unit(u) and filter(u) then
            count = count + 1
        end
    end
    return count
end

--- @param j_rect j_rect
--- @return rect
function rect:__call(j_rect)
    return rect.j_rect(j_rect)
end

--- @param j_rect j_rect
--- @return rect
function rect.j_rect(j_rect)
    if not rect[j_rect] then
        rect[j_rect] = setmetatable({}, rect)
        dbg.gchash(rect[j_rect], j_rect)
        rect[j_rect].min_x = jass.GetRectMinX(j_rect)
        rect[j_rect].min_y = jass.GetRectMinY(j_rect)
        rect[j_rect].max_x = jass.GetRectMaxX(j_rect)
        rect[j_rect].max_y = jass.GetRectMaxY(j_rect)
        rect[j_rect].handle = j_rect
        local j_trg = base.CreateTrigger(function()
            local u = et.unit(jass.GetEnteringUnit())
            rect[j_rect]:event_notify('单位-进入区域', u)
        end)
        local j_region = jass.CreateRegion()
        dbg.handle_ref(j_region)
        jass.RegionAddRect(j_region, j_rect)
        jass.TriggerRegisterEnterRegion(j_trg, j_region, nil)
    end
    return rect[j_rect]
end

--- @param min_x number
--- @param min_y number
--- @param max_x number
--- @param max_y number
--- @return rect
function rect.new(min_x, min_y, max_x, max_y)
    local j_rect = jass.Rect(min_x, min_y, max_x, max_y)
    dbg.handle_ref(j_rect)
    return rect.j_rect(j_rect)
end

--- @return point
function mt:get_center()
    return et.point((self.min_x + self.max_x) / 2, (self.min_y + self.max_y) / 2)
end

--- @return point
function mt:get_random()
    x = math.random(self.min_x, self.max_x)
    y = math.random(self.min_y, self.max_y)
    return et.point(x, y)
end

return rect
